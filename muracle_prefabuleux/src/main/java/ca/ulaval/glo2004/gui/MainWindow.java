package ca.ulaval.glo2004.gui;
import ca.ulaval.glo2004.domain.Controleur;
import ca.ulaval.glo2004.domain.CoteDTO;
import ca.ulaval.glo2004.domain.MurDTO;
import ca.ulaval.glo2004.domain.PanneauDTO;
import ca.ulaval.glo2004.domain.SalleDTO;
import ca.ulaval.glo2004.domain.util.Direction;
import ca.ulaval.glo2004.domain.util.Erreur;
import ca.ulaval.glo2004.domain.util.Mesure;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;

public class MainWindow extends javax.swing.JFrame {    
    public Point actualMousePoint;
    public Point delta;
    public Controleur controleur;
    public PanneauVue panneauVue;
    
    private DefaultListModel exportListeModel;
    private DefaultListModel nonExportListeModel;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        this.controleur = new Controleur();

        initComponents();
        
        initialiserDialogueExporter();
    }      

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        grpBtnInterieurExterieur = new javax.swing.ButtonGroup();
        jScrollBar1 = new javax.swing.JScrollBar();
        dialogueExporter = new javax.swing.JDialog();
        lblListeNonExporte = new javax.swing.JLabel();
        lblListeExporte = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPanneauxExport = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPanneauxNonExport = new javax.swing.JList<>();
        panneauBoutonsLst = new javax.swing.JPanel();
        btnAjouter = new javax.swing.JButton();
        fillerBtn = new javax.swing.Box.Filler(new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10), new java.awt.Dimension(0, 10));
        btnEnlever = new javax.swing.JButton();
        panneauDestination = new javax.swing.JPanel();
        txtDestination = new javax.swing.JTextField();
        fillerDest = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        btnSelectionDestination = new javax.swing.JButton();
        panneauBoutons = new javax.swing.JPanel();
        btnExporter = new javax.swing.JButton();
        btnAnnuler = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        panneauSeparateurHorizontal = new javax.swing.JSplitPane();
        panneauSeparateurVertical = new javax.swing.JSplitPane();
        panneauVues = new javax.swing.JTabbedPane();
        panneauVuePlanSalle = new ca.ulaval.glo2004.gui.PanneauVuePlanSalle(controleur);
        panneauVueCote = new javax.swing.JPanel();
        barreActionVueCote = new javax.swing.JToolBar();
        listeDirection = new javax.swing.JComboBox<>(Direction.values());
        rdoExterieur = new javax.swing.JRadioButton();
        rdoInterieur = new javax.swing.JRadioButton();
        panneauVueElevationCote = new ca.ulaval.glo2004.gui.PanneauVueElevationCote(controleur);
        panneauVuePanneau = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        panneauVueDecoupagePanneau = new ca.ulaval.glo2004.gui.PanneauVueDecoupagePanneau(controleur);
        boiteAOutils = new ca.ulaval.glo2004.gui.BoiteAOutils();
        panneauUtilitaireGauche = new javax.swing.JPanel();
        panneauProprietes = new ca.ulaval.glo2004.gui.PanneauProprietes(this, controleur);
        grilleToolBar = new javax.swing.JToolBar();
        lblGrille = new javax.swing.JLabel();
        nbEntier = new javax.swing.JSpinner();
        nbNum = new javax.swing.JSpinner();
        nbDenom = new javax.swing.JSpinner();
        tbtnGrille = new javax.swing.JToggleButton();
        barMenuHaut = new javax.swing.JMenuBar();
        fichierMenu = new javax.swing.JMenu();
        creerMenuBouton = new javax.swing.JMenuItem();
        ouvrirMenuBouton = new javax.swing.JMenuItem();
        enregistrerMenuBouton = new javax.swing.JMenuItem();
        exporterMenuBouton = new javax.swing.JMenuItem();
        quitterMenuBouton = new javax.swing.JMenuItem();
        editionMenu = new javax.swing.JMenu();
        undoMenuBouton = new javax.swing.JMenuItem();
        redoMenuBouton = new javax.swing.JMenuItem();
        supprimerMenuBouton = new javax.swing.JMenuItem();

        dialogueExporter.setMinimumSize(new java.awt.Dimension(800, 500));
        dialogueExporter.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        dialogueExporter.getContentPane().setLayout(new java.awt.GridBagLayout());

        lblListeNonExporte.setText("Panneaux exportable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        dialogueExporter.getContentPane().add(lblListeNonExporte, gridBagConstraints);

        lblListeExporte.setText("Panneaux Ã  exporter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        dialogueExporter.getContentPane().add(lblListeExporte, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(16, 16));

        jScrollPane1.setViewportView(lstPanneauxExport);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        dialogueExporter.getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(16, 16));

        jScrollPane2.setViewportView(lstPanneauxNonExport);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        dialogueExporter.getContentPane().add(jScrollPane2, gridBagConstraints);

        panneauBoutonsLst.setLayout(new javax.swing.BoxLayout(panneauBoutonsLst, javax.swing.BoxLayout.Y_AXIS));

        btnAjouter.setText(">>");
        btnAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjouterActionPerformed(evt);
            }
        });
        panneauBoutonsLst.add(btnAjouter);
        panneauBoutonsLst.add(fillerBtn);

        btnEnlever.setText("<<");
        btnEnlever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnleverActionPerformed(evt);
            }
        });
        panneauBoutonsLst.add(btnEnlever);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        dialogueExporter.getContentPane().add(panneauBoutonsLst, gridBagConstraints);

        panneauDestination.setLayout(new javax.swing.BoxLayout(panneauDestination, javax.swing.BoxLayout.LINE_AXIS));

        txtDestination.setText("Path du dossier d'exportation");
        panneauDestination.add(txtDestination);
        panneauDestination.add(fillerDest);

        btnSelectionDestination.setText("...");
        btnSelectionDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectionDestinationActionPerformed(evt);
            }
        });
        panneauDestination.add(btnSelectionDestination);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        dialogueExporter.getContentPane().add(panneauDestination, gridBagConstraints);

        btnExporter.setText("Exporter");
        btnExporter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExporterActionPerformed(evt);
            }
        });
        panneauBoutons.add(btnExporter);

        btnAnnuler.setText("Annuler");
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnulerActionPerformed(evt);
            }
        });
        panneauBoutons.add(btnAnnuler);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        dialogueExporter.getContentPane().add(panneauBoutons, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1920, 1080));

        mainPanel.setLayout(new java.awt.BorderLayout());

        panneauSeparateurHorizontal.setResizeWeight(1.0);
        panneauSeparateurHorizontal.setMinimumSize(new java.awt.Dimension(200, 40));
        panneauSeparateurHorizontal.setName(""); // NOI18N
        panneauSeparateurHorizontal.setOneTouchExpandable(true);
        panneauSeparateurHorizontal.setPreferredSize(new java.awt.Dimension(500, 500));
        panneauSeparateurHorizontal.setVerifyInputWhenFocusTarget(false);

        panneauSeparateurVertical.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        panneauSeparateurVertical.setResizeWeight(1.0);
        panneauSeparateurVertical.setOneTouchExpandable(true);

        panneauVues.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                panneauVuesStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panneauVuePlanSalleLayout = new javax.swing.GroupLayout(panneauVuePlanSalle);
        panneauVuePlanSalle.setLayout(panneauVuePlanSalleLayout);
        panneauVuePlanSalleLayout.setHorizontalGroup(
            panneauVuePlanSalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
        );
        panneauVuePlanSalleLayout.setVerticalGroup(
            panneauVuePlanSalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        panneauVues.addTab("Vue de plan", panneauVuePlanSalle);

        panneauVueCote.setLayout(new java.awt.BorderLayout());

        barreActionVueCote.setRollover(true);

        listeDirection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeDirectionActionPerformed(evt);
            }
        });
        barreActionVueCote.add(listeDirection);

        grpBtnInterieurExterieur.add(rdoExterieur);
        rdoExterieur.setSelected(true);
        rdoExterieur.setText("Vue extÃ©rieure");
        rdoExterieur.setFocusable(false);
        rdoExterieur.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        rdoExterieur.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barreActionVueCote.add(rdoExterieur);

        grpBtnInterieurExterieur.add(rdoInterieur);
        rdoInterieur.setText("Vue intÃ©rieure");
        rdoInterieur.setFocusable(false);
        rdoInterieur.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rdoInterieur.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoInterieurStateChanged(evt);
            }
        });
        barreActionVueCote.add(rdoInterieur);

        panneauVueCote.add(barreActionVueCote, java.awt.BorderLayout.NORTH);

        panneauVueElevationCote.setFocusCycleRoot(true);
        panneauVueElevationCote.setPreferredSize(new java.awt.Dimension(707, 378));

        javax.swing.GroupLayout panneauVueElevationCoteLayout = new javax.swing.GroupLayout(panneauVueElevationCote);
        panneauVueElevationCote.setLayout(panneauVueElevationCoteLayout);
        panneauVueElevationCoteLayout.setHorizontalGroup(
            panneauVueElevationCoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
        );
        panneauVueElevationCoteLayout.setVerticalGroup(
            panneauVueElevationCoteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 352, Short.MAX_VALUE)
        );

        panneauVueCote.add(panneauVueElevationCote, java.awt.BorderLayout.CENTER);

        panneauVues.addTab("Vue de cÃ´tÃ©", panneauVueCote);

        panneauVuePanneau.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout panneauVueDecoupagePanneauLayout = new javax.swing.GroupLayout(panneauVueDecoupagePanneau);
        panneauVueDecoupagePanneau.setLayout(panneauVueDecoupagePanneauLayout);
        panneauVueDecoupagePanneauLayout.setHorizontalGroup(
            panneauVueDecoupagePanneauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
        );
        panneauVueDecoupagePanneauLayout.setVerticalGroup(
            panneauVueDecoupagePanneauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jPanel1.add(panneauVueDecoupagePanneau, java.awt.BorderLayout.CENTER);

        panneauVuePanneau.add(jPanel1, java.awt.BorderLayout.CENTER);

        panneauVues.addTab("Vue des panneaux", panneauVuePanneau);

        panneauSeparateurVertical.setTopComponent(panneauVues);
        panneauVues.getAccessibleContext().setAccessibleName("test");
        panneauVues.getAccessibleContext().setAccessibleDescription("");

        boiteAOutils.setMinimumSize(new java.awt.Dimension(200, 175));
        boiteAOutils.setPreferredSize(new java.awt.Dimension(600, 175));
        panneauSeparateurVertical.setRightComponent(boiteAOutils);

        panneauSeparateurHorizontal.setLeftComponent(panneauSeparateurVertical);

        panneauUtilitaireGauche.setMinimumSize(new java.awt.Dimension(300, 300));
        panneauUtilitaireGauche.setPreferredSize(new java.awt.Dimension(400, 300));
        panneauUtilitaireGauche.setLayout(new java.awt.BorderLayout());

        panneauProprietes.setMinimumSize(new java.awt.Dimension(300, 300));
        panneauProprietes.setPreferredSize(new java.awt.Dimension(300, 300));
        panneauUtilitaireGauche.add(panneauProprietes, java.awt.BorderLayout.CENTER);

        grilleToolBar.setRollover(true);

        lblGrille.setText("Distance");
        grilleToolBar.add(lblGrille);

        nbEntier.setModel(new javax.swing.SpinnerNumberModel(12, 0, null, 1));
        nbEntier.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ChangerEchelleGrille(evt);
            }
        });
        grilleToolBar.add(nbEntier);

        nbNum.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        nbNum.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ChangerEchelleGrille(evt);
            }
        });
        grilleToolBar.add(nbNum);

        nbDenom.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        nbDenom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ChangerEchelleGrille(evt);
            }
        });
        grilleToolBar.add(nbDenom);

        tbtnGrille.setText("Afficher grille");
        tbtnGrille.setFocusable(false);
        tbtnGrille.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtnGrille.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtnGrille.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tbtnGrilleItemStateChanged(evt);
            }
        });
        grilleToolBar.add(tbtnGrille);

        panneauUtilitaireGauche.add(grilleToolBar, java.awt.BorderLayout.PAGE_START);

        panneauSeparateurHorizontal.setRightComponent(panneauUtilitaireGauche);

        mainPanel.add(panneauSeparateurHorizontal, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        fichierMenu.setText("Fichier");

        creerMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        creerMenuBouton.setText("CrÃ©er une salle");
        creerMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creerMenuBoutonActionPerformed(evt);
            }
        });
        fichierMenu.add(creerMenuBouton);

        ouvrirMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        ouvrirMenuBouton.setText("Ouvrir une salle");
        ouvrirMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirMenuBoutonActionPerformed(evt);
            }
        });
        fichierMenu.add(ouvrirMenuBouton);

        enregistrerMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        enregistrerMenuBouton.setText("Enregistrer");
        enregistrerMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enregistrerMenuBoutonActionPerformed(evt);
            }
        });
        fichierMenu.add(enregistrerMenuBouton);

        exporterMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exporterMenuBouton.setText("Exporter");
        exporterMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exporterMenuBoutonActionPerformed(evt);
            }
        });
        fichierMenu.add(exporterMenuBouton);

        quitterMenuBouton.setText("Quitter");
        quitterMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterMenuBoutonActionPerformed(evt);
            }
        });
        fichierMenu.add(quitterMenuBouton);

        barMenuHaut.add(fichierMenu);

        editionMenu.setText("Ãdition");

        undoMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        undoMenuBouton.setText("Undo");
        undoMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuBoutonActionPerformed(evt);
            }
        });
        editionMenu.add(undoMenuBouton);

        redoMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        redoMenuBouton.setText("Redo");
        redoMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuBoutonActionPerformed(evt);
            }
        });
        editionMenu.add(redoMenuBouton);

        supprimerMenuBouton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        supprimerMenuBouton.setText("Supprimer");
        supprimerMenuBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerMenuBoutonActionPerformed(evt);
            }
        });
        editionMenu.add(supprimerMenuBouton);

        barMenuHaut.add(editionMenu);

        setJMenuBar(barMenuHaut);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ouvrirMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirMenuBoutonActionPerformed
        JFileChooser selectionFichier = getFileChooser("Ouvrir un projet");
        
        if (selectionFichier.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File fichierProjet = selectionFichier.getSelectedFile();
            
            controleur.ouvrirProjet(fichierProjet.getAbsolutePath());
            
            txtDestination.setText(fichierProjet.getParent());
            repaint();
        }
    }//GEN-LAST:event_ouvrirMenuBoutonActionPerformed

    private void quitterMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterMenuBoutonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitterMenuBoutonActionPerformed

    private void creerMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creerMenuBoutonActionPerformed
        controleur.creerProjet();
        
        repaint();
    }//GEN-LAST:event_creerMenuBoutonActionPerformed

    private void enregistrerMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enregistrerMenuBoutonActionPerformed
        if(controleur.getCheminProjet().isBlank()) {
            JFileChooser selectionFichier = getFileChooser("Sauvegarder le projet");
        
            if (selectionFichier.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                String cheminFichierProjet = selectionFichier.getSelectedFile().getAbsolutePath();

                controleur.setCheminProjet(cheminFichierProjet);
            }
        }
        
        if(!controleur.getCheminProjet().isBlank()) controleur.enregistrerProjet();
    }//GEN-LAST:event_enregistrerMenuBoutonActionPerformed

    private void undoMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuBoutonActionPerformed
        controleur.annuler();
        
        repaint();
    }//GEN-LAST:event_undoMenuBoutonActionPerformed

    private void redoMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuBoutonActionPerformed
        controleur.refaire();
        
        repaint();
    }//GEN-LAST:event_redoMenuBoutonActionPerformed

    private void supprimerMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerMenuBoutonActionPerformed
        List<Erreur> erreurs = controleur.supprimerObjetSelectionne();
        
        afficherErreur(erreurs);
        
        repaint();
    }//GEN-LAST:event_supprimerMenuBoutonActionPerformed

    private void listeDirectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeDirectionActionPerformed
        controleur.setDirectionSelectionne((Direction) listeDirection.getSelectedItem());
        
        repaint();
    }//GEN-LAST:event_listeDirectionActionPerformed

    private void exporterMenuBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exporterMenuBoutonActionPerformed
        majDonnesExportation();
        dialogueExporter.setVisible(true);
    }//GEN-LAST:event_exporterMenuBoutonActionPerformed
    
    private void initialiserDialogueExporter() {
        txtDestination.setText("");
        
        nonExportListeModel = new DefaultListModel<PanneauDTO>();
        lstPanneauxNonExport.setModel(nonExportListeModel);
        
        exportListeModel = new DefaultListModel<PanneauDTO>();
        lstPanneauxExport.setModel(exportListeModel);
    }
    
    private void majDonnesExportation() {
        nonExportListeModel.clear();
        exportListeModel.clear();
        
        SalleDTO salle = controleur.getSalle();
        for(CoteDTO cote : salle.Cotes) {
            int cptMur = 1;
            for(MurDTO mur : cote.Murs) {
                mur.PanneauExterieur.Nom = String.format("%s - Mur %d ExtÃ©rieur", cote.Direction.toString(), cptMur);
                mur.PanneauInterieur.Nom = String.format("%s - Mur %d IntÃ©rieur", cote.Direction.toString(), cptMur);
                
                nonExportListeModel.addElement(mur.PanneauExterieur);
                nonExportListeModel.addElement(mur.PanneauInterieur);
                
                cptMur++;
            }
        }
    }
    
    private void panneauVuesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_panneauVuesStateChanged
        updateBoiteOutils();
        repaint();
    }//GEN-LAST:event_panneauVuesStateChanged

    private void rdoInterieurStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoInterieurStateChanged
        controleur.setEstInterieur(rdoInterieur.isSelected());
        
        updateBoiteOutils();
        repaint();
    }//GEN-LAST:event_rdoInterieurStateChanged

    private void tbtnGrilleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tbtnGrilleItemStateChanged
        controleur.setAfficherGrille(evt.getStateChange() == ItemEvent.SELECTED);
        
        repaint();
    }//GEN-LAST:event_tbtnGrilleItemStateChanged

    private void ChangerEchelleGrille(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ChangerEchelleGrille
        int entier = (int)nbEntier.getValue();
        int numerateur = (int)nbNum.getValue();
        
        if(numerateur + entier == 0) {
            numerateur = 1;
            nbNum.setValue(1);
        }
        
        Mesure nouvelleEchelle = new Mesure(entier,
                                            numerateur,
                                            (int)nbDenom.getValue());
        
        controleur.setDistanceGrille(nouvelleEchelle);
        
        repaint();
    }//GEN-LAST:event_ChangerEchelleGrille

    private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnulerActionPerformed
        dialogueExporter.setVisible(false);
    }//GEN-LAST:event_btnAnnulerActionPerformed

    private void btnAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjouterActionPerformed
        int[] selection = lstPanneauxNonExport.getSelectedIndices();
        for (int i = selection.length - 1; i >= 0; i--) {
            exportListeModel.addElement(nonExportListeModel.get(selection[i]));

            nonExportListeModel.remove(selection[i]);
        }
    }//GEN-LAST:event_btnAjouterActionPerformed

    private void btnEnleverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnleverActionPerformed
        int[] selection = lstPanneauxExport.getSelectedIndices();
        for(int i = selection.length - 1; i >= 0; i--) {
            nonExportListeModel.addElement(exportListeModel.get(selection[i]));
            
            exportListeModel.remove(selection[i]);
        }
    }//GEN-LAST:event_btnEnleverActionPerformed

    private void btnExporterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExporterActionPerformed
        File file = new File(txtDestination.getText());
        if(file.isDirectory()) {
            List<PanneauDTO> panneauxAExporter = new ArrayList<>();
            for(Object panneau : exportListeModel.toArray()) {
                panneauxAExporter.add((PanneauDTO) panneau);
            }
            
            try { 
                controleur.exporter(txtDestination.getText(), panneauxAExporter);
            } catch (ParserConfigurationException | TransformerException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);

                JOptionPane.showMessageDialog(null, "Une erreur inattendue s'est produite lors de l'exportation des panneaux sÃ©lÃ©ctionnÃ©s.", "Erreur inattendue", JOptionPane.ERROR_MESSAGE);
            }
        
            dialogueExporter.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Le rÃ©pertoire sÃ©lectionnÃ© n'est pas valide.", "RÃ©pertoire invalide", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExporterActionPerformed
    
    private void btnSelectionDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectionDestinationActionPerformed
        JFileChooser selectionDossier = new JFileChooser(FileSystemView.getFileSystemView());
        selectionDossier.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        selectionDossier.setDialogTitle("SÃ©lectionner le rÃ©pertoire d'exportation");
        selectionDossier.setApproveButtonText("SÃ©lectionner");
        
        if (selectionDossier.showOpenDialog(dialogueExporter) == JFileChooser.APPROVE_OPTION) {
                String cheminDossierDestination = selectionDossier.getSelectedFile().getAbsolutePath();

                txtDestination.setText(cheminDossierDestination);
        }
    }//GEN-LAST:event_btnSelectionDestinationActionPerformed
    
    private void updateBoiteOutils() {
        BoiteAOutils.Vue vueSelectionne = BoiteAOutils.Vue.Panneau;
        switch(panneauVues.getSelectedIndex()) {
            case 0:
                vueSelectionne = BoiteAOutils.Vue.Salle;
                break;
            case 1:
                vueSelectionne = BoiteAOutils.Vue.Cote;
                break;
            case 2:
                vueSelectionne = BoiteAOutils.Vue.Panneau;
                break;
        }
        
        boiteAOutils.changerVueSelectionne(vueSelectionne, rdoInterieur.isSelected());
    }
    
    private JFileChooser getFileChooser(String titre) {
        JFileChooser selectionFichier = new JFileChooser();
        selectionFichier.setDialogTitle(titre);   
        
        FileFilter filtre = new FileNameExtensionFilter("Fichiers Muracle (*.mur)", new String[] {"mur"});
        selectionFichier.removeChoosableFileFilter(selectionFichier.getAcceptAllFileFilter());
        selectionFichier.addChoosableFileFilter(filtre);
        
        return selectionFichier;
    }
    
    public static void afficherErreur(List<Erreur> erreurs) {
        if(!erreurs.isEmpty()) {
            String titre;
            String message = "";
            
            if(erreurs.size() == 1) {
                titre = "Erreur";
                message += "L'action a Ã©tÃ© annulÃ©e en raison de l'erreur suivante : \n" ;
                message += erreurs.get(0).getMessage();
            } else {
                titre = "Erreurs";
                message = "L'action a Ã©tÃ© annulÃ©e en raison des erreurs suivantes : \n" ;
                int cpt = 1;
                for(Erreur erreur : erreurs) {
                    message += String.format("%d. %s \n", cpt, erreur.getMessage());
                    cpt++;
                }
            }
            
            JOptionPane.showMessageDialog(null, message.strip(), titre, JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
                try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
        
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barMenuHaut;
    private javax.swing.JToolBar barreActionVueCote;
    private ca.ulaval.glo2004.gui.BoiteAOutils boiteAOutils;
    private javax.swing.JButton btnAjouter;
    private javax.swing.JButton btnAnnuler;
    private javax.swing.JButton btnEnlever;
    private javax.swing.JButton btnExporter;
    private javax.swing.JButton btnSelectionDestination;
    private javax.swing.JMenuItem creerMenuBouton;
    private javax.swing.JDialog dialogueExporter;
    private javax.swing.JMenu editionMenu;
    private javax.swing.JMenuItem enregistrerMenuBouton;
    private javax.swing.JMenuItem exporterMenuBouton;
    private javax.swing.JMenu fichierMenu;
    private javax.swing.Box.Filler fillerBtn;
    private javax.swing.Box.Filler fillerDest;
    private javax.swing.JToolBar grilleToolBar;
    private javax.swing.ButtonGroup grpBtnInterieurExterieur;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblGrille;
    private javax.swing.JLabel lblListeExporte;
    private javax.swing.JLabel lblListeNonExporte;
    private javax.swing.JComboBox<Direction> listeDirection;
    private javax.swing.JList<String> lstPanneauxExport;
    private javax.swing.JList<String> lstPanneauxNonExport;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSpinner nbDenom;
    private javax.swing.JSpinner nbEntier;
    private javax.swing.JSpinner nbNum;
    private javax.swing.JMenuItem ouvrirMenuBouton;
    private javax.swing.JPanel panneauBoutons;
    private javax.swing.JPanel panneauBoutonsLst;
    private javax.swing.JPanel panneauDestination;
    private ca.ulaval.glo2004.gui.PanneauProprietes panneauProprietes;
    private javax.swing.JSplitPane panneauSeparateurHorizontal;
    private javax.swing.JSplitPane panneauSeparateurVertical;
    private javax.swing.JPanel panneauUtilitaireGauche;
    private javax.swing.JPanel panneauVueCote;
    private ca.ulaval.glo2004.gui.PanneauVueDecoupagePanneau panneauVueDecoupagePanneau;
    private ca.ulaval.glo2004.gui.PanneauVueElevationCote panneauVueElevationCote;
    private javax.swing.JPanel panneauVuePanneau;
    private ca.ulaval.glo2004.gui.PanneauVuePlanSalle panneauVuePlanSalle;
    private javax.swing.JTabbedPane panneauVues;
    private javax.swing.JMenuItem quitterMenuBouton;
    private javax.swing.JRadioButton rdoExterieur;
    private javax.swing.JRadioButton rdoInterieur;
    private javax.swing.JMenuItem redoMenuBouton;
    private javax.swing.JMenuItem supprimerMenuBouton;
    private javax.swing.JToggleButton tbtnGrille;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JMenuItem undoMenuBouton;
    // End of variables declaration//GEN-END:variables

 
    
}
